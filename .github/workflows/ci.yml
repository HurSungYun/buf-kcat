name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Run vet
        run: go vet ./...
      
      - name: Run fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Please run 'make fmt' to format your code"
            gofmt -s -d .
            exit 1
          fi

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        if: matrix.go-version == '1.23'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Install buf
        run: |
          BUF_VERSION="1.32.0"
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-Linux-x86_64" -o /tmp/buf
          chmod +x /tmp/buf
          sudo mv /tmp/buf /usr/local/bin/buf
          buf --version
      
      - name: Build binary
        run: make build
      
      - name: Start Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 15  # Wait for Kafka to be ready
      
      - name: Run integration tests
        run: cd test/integration && go test -v -timeout 5m
      
      - name: Stop Docker Compose
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o buf-kcat-${{ matrix.goos }}-${{ matrix.goarch }} .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: buf-kcat-${{ matrix.goos }}-${{ matrix.goarch }}
          path: buf-kcat-${{ matrix.goos }}-${{ matrix.goarch }}